%% LaTeX2e file `sample.eps'
%% generated by the `filecontents' environment
%% from source `ufsample' on 2005/06/05.
%%
%%Title: sample.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Sat Jan 27 19:32:44 2001
%%For: Ron Smith
%%BoundingBox: 0 0 184 166
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.255 0.271 0.255 srgb} bind def
/col33 {0.557 0.557 0.557 srgb} bind def
/col34 {0.255 0.271 0.255 srgb} bind def
/col35 {0.557 0.557 0.557 srgb} bind def
/col36 {0.255 0.271 0.255 srgb} bind def
/col37 {0.557 0.557 0.557 srgb} bind def
/col38 {0.255 0.271 0.255 srgb} bind def
/col39 {0.557 0.557 0.557 srgb} bind def
/col40 {0.255 0.271 0.255 srgb} bind def
/col41 {0.557 0.557 0.557 srgb} bind def
/col42 {0.255 0.271 0.255 srgb} bind def
/col43 {0.557 0.557 0.557 srgb} bind def
/col44 {0.255 0.271 0.255 srgb} bind def
/col45 {0.557 0.557 0.557 srgb} bind def
/col46 {0.255 0.271 0.255 srgb} bind def
/col47 {0.557 0.557 0.557 srgb} bind def
/col48 {0.255 0.271 0.255 srgb} bind def
/col49 {0.557 0.557 0.557 srgb} bind def

end
save
newpath 0 166 moveto 0 0 lineto 184 0 lineto 184 166 lineto closepath clip newpath
-115.0 245.0 translate
1 -1 scale

/PATsstr 1 string def
/PATawidthshow {  % cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup % cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put % cx cy cchar rx ry char (char)
    false charpath % cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint % cx cy cchar rx ry char x y
    newpath
    moveto % cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq { % cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto % cx cy cchar rx ry
  } forall
  pop pop pop pop pop % -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
/PATdraw { % proc
  save exch
    PATpcalc % proc nw nh px py
    5 -1 roll exec % nw nh px py
    newpath
    PATfill % -
  restore
} bind def
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string % nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub { % nw nh px py str source
3 index 3 index % nw nh px py str source px py
moveto % nw nh px py str source
Multi 1 ne { dup PC exch get PATsc } if
0 1 7 index 1 sub { 2 index exch 2 index put } for pop
3 index  % nw nh px py str nh
{ % nw nh px py str
  currentpoint % nw nh px py str cx cy
  2 index oldshow % nw nh px py str cx cy
  YStep add moveto % nw nh px py str
} repeat % nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

/PATkshow { % proc string
  exch bind % string proc
  1 index 0 get % string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
    % Find the n+1th character in the string
    3 index exch 1 add get % string proe char char+1
    exch 2 copy % strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put % string proc chr+1 chr chr+1 (chr)
    false charpath % string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll % string proc char+1 mark char char+1
    4 index exec % string proc char+1 mark...
    cleartomark % string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put % string proc (char+1)
  false charpath % string proc
  /clip load PATdraw
  neewath
  pop pop % -
} bind def
/PATmp { % patdict patmtx PATmp patinstance
  exch dup length 7 add % We will add 6 new entries plus 1 FID
  dict copy % Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
mark 3 1 roll % mark dict char
exch begin
Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
  PaintType 2 eq Multi 1 ne or
  { XStep 0 FontBBox aload pop setcachedevice }
  { XStep 0 setcharwidth } ifelse
  currentdict % mark [paintdata] dict
  /PaintProc load % mark [paintdata] dict paintproc
end
gsave
  false PATredef exec true PATredef
grestore
cleartomark % -
    } bind def
    currentdict
  end % newdict
  /foo exch % /foo newlict
  definefont % newfont
} bind def
/PATpcalc { % - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
PatternGState /cm get setmatrix
BBox aload pop pop pop translate
pathbbox % llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling % llx lly urx qh
    4 1 roll % qh llx lly urx
    PatWidth div ceiling % qh llx lly qw
    4 1 roll % qw qh llx lly
    PatHeight div floor % qw qh llx ph
    4 1 roll % ph qw qh llx
    PatWidth div floor % ph qw qh pw
    4 1 roll % pw ph qw qh
    2 index sub cvi abs % pw ph qs qh-ph
    exch 3 index sub cvi abs exch % pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll % nw nh pw ph
    PatHeight mul % nw nh pw py
    exch % nw nh py pw
    PatWidth mul exch % nw nh px py
  end
} bind def

/oldfill /fill load def
/oldeofill /eofill load def
/oldstroke /stroke load def
/oldshow /show load def
/oldashow /ashow load def
/oldwidthshow /widthshow load def
/oldawidthshow /awidthshow load def
/oldkshow /kshow load def

/fill    { oldfill } bind def
/eofill    { oldeofill } bind def
/stroke    { oldstroke } bind def
/show    { oldshow } bind def
/ashow    { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow     { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc { % colorarray
  aload length % c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg { % dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc % proc nw nh px py
    clip newpath PATfill
    } stopped {
(*** PATstroke Warning: Path is too complex, stroking
  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc { % modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat % tilingtype
    matrix currentmatrix exch % cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
dup 4 get exch dup 5 get exch % tx ty cmtx
XStep 0 dtransform
round exch round exch % tx ty cmtx dx.x dx.y
XStep div exch XStep div exch % tx ty cmtx a b
0 YStep dtransform
round exch round exch % tx ty cmtx a b dy.x dy.y
YStep div exch YStep div exch % tx ty cmtx a b c d
7 -3 roll astore % { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
{<010101010202020204040404080808081010101020202020
404040408080808001010101020202020404040408080808
101010102020202040404040808080800101010102020202
040404040808080810101010202020204040404080808080
010101010202020204040404080808081010101020202020
4040404080808080>}
     imagemask } bind
] def
/PaintProc {
pop
exec fill
} def
currentdict
end
/P5 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
/endangle exch def
/startangle exch def
/yrad exch def
/xrad exch def
/y exch def
/x exch def
/savematrix mtrx currentmatrix def
x y tr xrad yrad sc 0 0 1 startangle endangle arc
closepath
savematrix setmatrix
} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
7.500 slw
n 3449 2709 m 4952 2086 l 4949 3331 l 3452 2701 l 3452 2705 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 229.93 139.07] PATmp PATsp ef gr PATusp gs col0 s gr
n 4275 2625 m
 4425 2775 l gs col0 s gr
n 4275 2775 m
 4425 2625 l gs col0 s gr
n 3375 1725 m
 3525 1875 l gs col0 s gr
n 3375 1875 m
 3525 1725 l gs col0 s gr
n 2475 2625 m
 2625 2775 l gs col0 s gr
n 2475 2775 m
 2625 2625 l gs col0 s gr
n 3375 3525 m
 3525 3675 l gs col0 s gr
n 3375 3675 m
 3525 3525 l gs col0 s gr
n 2751 1996 m
 2901 2146 l gs col0 s gr
n 2751 2146 m
 2901 1996 l gs col0 s gr
n 2744 3252 m
 2894 3402 l gs col0 s gr
n 2744 3402 m
 2894 3252 l gs col0 s gr
n 4011 1992 m
 4161 2142 l gs col0 s gr
n 4011 2142 m
 4161 1992 l gs col0 s gr
n 4011 3260 m
 4161 3410 l gs col0 s gr
n 4011 3410 m
 4161 3260 l gs col0 s gr
15.000 slw
n 3450 2700 900 900 0 360 DrawEllipse gs col0 s gr

n 3450 4050 m
 3450 1350 l gs col0 s gr
n 1950 2700 m
 4950 2700 l gs col0 s gr
7.500 slw
n 3456 2701 m 4952 2082 l
 4960 2082 l gs col0 s gr
n 3456 2709 m 4945 3327 l
 4945 3331 l gs col0 s gr
$F2psEnd
rs
end
